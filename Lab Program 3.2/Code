#include <stdio.h>
#include <stdlib.h>

#define MAX 100
#define INF 999999

typedef struct {
    int u, v, w;
} Edge;

int parent[MAX];

int find(int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
}

void union_sets(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;
}

void kruskal(Edge edges[], int n, int e) {
    int i, j;
    Edge temp;
    for (i = 0; i < e - 1; i++) {
        for (j = 0; j < e - i - 1; j++) {
            if (edges[j].w > edges[j + 1].w) {
                temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }

    for (i = 0; i < n; i++)
        parent[i] = i;

    int total_cost = 0;
    printf("Edges in the Minimum Cost Spanning Tree:\n");

    int count = 0;
    for (i = 0; i < e && count < n - 1; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        int w = edges[i].w;

        if (find(u) != find(v)) {
            union_sets(u, v);
            printf("%d - %d : %d\n", u, v, w);
            total_cost += w;
            count++;
        }
    }

    printf("Total cost of Minimum Spanning Tree: %d\n", total_cost);
}

int main() {
    int n, e;
    Edge edges[MAX];

    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &e);

    printf("Enter each edge as: u v weight\n");
    for (int i = 0; i < e; i++) {
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].w);
    }

    kruskal(edges, n, e);

    return 0;
}
