#include <stdio.h>
#include <stdlib.h>

#define LEFT 0
#define RIGHT 1

int n;

void printPermutation(int *arr) {
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int getLargestMobile(int *arr, int *dir) {
    int largestMobileIndex = -1;
    int largestMobile = 0;

    for (int i = 0; i < n; i++) {
        int nextIndex = (dir[i] == LEFT) ? i - 1 : i + 1;

        if (nextIndex >= 0 && nextIndex < n) {
            if (arr[i] > arr[nextIndex] && arr[i] > largestMobile) {
                largestMobile = arr[i];
                largestMobileIndex = i;
            }
        }
    }
    return largestMobileIndex;
}

void johnsonTrotter() {
    int *arr = malloc(n * sizeof(int));
    int *dir = malloc(n * sizeof(int)); 

    for (int i = 0; i < n; i++) {
        arr[i] = i + 1;
        dir[i] = LEFT;
    }

    printPermutation(arr);

    while (1) {
        int largestMobileIndex = getLargestMobile(arr, dir);
        if (largestMobileIndex == -1)
            break; // No more mobile integer, done

        int swapIndex = (dir[largestMobileIndex] == LEFT) ? largestMobileIndex - 1 : largestMobileIndex + 1;

        int temp = arr[largestMobileIndex];
        arr[largestMobileIndex] = arr[swapIndex];
        arr[swapIndex] = temp;

        temp = dir[largestMobileIndex];
        dir[largestMobileIndex] = dir[swapIndex];
        dir[swapIndex] = temp;

        largestMobileIndex = swapIndex;

        for (int i = 0; i < n; i++) {
            if (arr[i] > arr[largestMobileIndex]) {
                dir[i] = (dir[i] == LEFT) ? RIGHT : LEFT;
            }
        }

        printPermutation(arr);
    }

    free(arr);
    free(dir);
}

int main() {
    printf("Enter n: ");
    scanf("%d", &n);

    johnsonTrotter();

    return 0;
}
